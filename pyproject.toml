[tool.poetry]
name = "cognio"
version = "0.1.0"
description = "Persistent semantic memory server for MCP - Long-term context that survives across AI conversations"
authors = ["0xReLogic <https://github.com/0xReLogic>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/0xReLogic/Cognio"
repository = "https://github.com/0xReLogic/Cognio"
keywords = ["mcp", "model-context-protocol", "semantic-search", "embeddings", "long-term-memory", "ai-memory"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
sentence-transformers = "^2.2.2"
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
python-dotenv = "^1.0.0"
numpy = "^1.26.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
httpx = "^0.25.2"
ruff = "^0.1.6"
black = "^23.11.0"
mypy = "^1.7.1"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W", "UP"]
ignore = ["E501"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]
asyncio_mode = "auto"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
